blockchain.config.name = "regtest"

peer.discovery = {
    enabled = false
    bind.ip = 10.0.0.20
    external.ip = 10.0.0.20
}

peer {
    active = [    
	{ 
	  ip = 10.0.0.6
	  port = 30305
	  nodeId = d93499317aa6547341a74ed828da5b3668314d4fc2ddfdf65b0a5b15a9de11f8ca65e4cc4383bbb7efd5f4d945efe6a3e22648bca75d1c6799b6bc0cc98dccb7
	}  
	,{ 
	  ip = 10.0.0.10
	  port = 30305
	  nodeId = bd107de160fe614ef478680e30fecf30fbe0e2f9841b4dc814e8b425df43936b6d7526938e1614f8ef845ad120c3766d088c8642e61a2fa221f07f2be8543fde
	}  
	,{ 
	  ip = 10.0.0.12
	  port = 30305
	  nodeId = 2712fed691a16269c5202afd7455aaa802bbe34dc4e8ea0e7a71d6eebfe98409c9207c98a7b9c7ff12ef02b1094cb4a7c8f593cb87c0511153eff179715a5d25
	}  
	,{ 
	  ip = 10.0.0.19
	  port = 30305
	  nodeId = 4bbcd0d2fb5b0956bc9bfcc4faee73bde6a87977ba3d99759eda92b4cf934a0def682c6bf8056bab13beed8d72e99b223ac83f31442e1e0a5b453627fc855dd4
	}  
	,{ 
	  ip = 10.0.0.3
	  port = 30305
	  nodeId = c7523df51710a3b0e8a4e0cb1b08a78052a90129bd72cf5c7d80f12ac22759b71c8a9d39b834fdd35cbba213c2bd50fc47404989fc57ab99993ef7181c0dde35
	}]

    # currently only protocol supported is RSK
    capabilities = [rsk]

    bind.ip = 10.0.0.20

    # Peer for server to listen for incoming
    # connections
    listen.port = 30305

    connection.timeout = 2
    channel.read.timeout = 30

    privateKey = fdf7f03a03c520199b197d376e491469ac71890c96548a7f17663b26b5f569f0

    networkId = 456124
    p2p {
        # version = 4
        framing.maxSize = 32768
        eip8 = true
    }
    maxAcivePeers = 30
}
genesis = rootstock-dev.json
transaction.approve.timeout = 15
transaction.outdated.threshold = 10

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

database {
    dir = node20
    reset = true
}

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey1

dump {
    full = false
    dir = dmp
    block = -1
    style = pretty
    clean.on.restart = true
}

vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000

    # enables storage disctionary db recording
    # see the org.ehereum.db.StorageDisctionary class for details
    storage.dictionary.enabled = false
}
trace.startblock = -1
play.vm = false
hello.phrase = Dev
root.hash.start = null
keyvalue.datasource = leveldb
redis.enabled=false
record.blocks=false
blockchain.only=false
blocks.loader=""
details.inmemory.storage.limit=1000
cache {
    flush {
        # [0.7 = 70% memory to flush]
        memory = 0
        # [10000 flush each 10000 blocks]
        blocks = 1
    }
}
# eth sync process
sync {
    enabled = true
    max.hashes.ask = 10000
    max.blocks.ask = 100
    peer.count = 10
    waitForSync = false
    exitOnBlockConflict = true
}
# miner options
miner {
    server.enabled = false
    client.enabled = false
    minGasPrice = 0
    # these are values used by MinerServer to set the notify flag on/off
    gasUnitInDollars = 0.001
    minFeesNotifyInDollars = 30
}
simulateTxs {
    enabled = false
}
federator {
    enabled = false
}
rpc {
    enabled = false
}
wallet {
    accounts = [
        {
            privateKey = fdf7f03a03c520199b197d376e491469ac71890c96548a7f17663b26b5f569f0
            publicKey = 04fbbac84425856a4d457d474f9a150eb517dd5f85d138290b1d59532b546f617ca6c68de237617a0b6632059f1382cb6ffdcb34af8a8e8543998ccd09467b34d9
            address = ffdd5310fa80e6eff8020339f901f6c6c8a20bbb
        }
    ]
}
blocks {
    enabled: false
    recorder: "blocksminer1.txt"
}
wire {
    protocol: "rsk"
}
