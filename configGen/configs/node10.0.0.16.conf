blockchain.config.name = "regtest"

peer.discovery = {
    enabled = false
    bind.ip = 10.0.0.16
    external.ip = 10.0.0.16
}

peer {
    active = [    
	{ 
	  ip = 10.0.0.1
	  port = 30305
	  nodeId = 11f4c0f1e1117192feb192d95c1f3c9cd7c5f50a73f3b5364af52c7d92ff2609be360e513c0cbbfe7b306698a3e36d4ae9dea2909880390d6d04b8c0b09084ae
	}  
	,{ 
	  ip = 10.0.0.23
	  port = 30305
	  nodeId = bf8c8c6325c0720d52c44501d83f55c1dec82200dfa5b0731bbf450c9724a45cd035d5b116b8cc5ffe992fdcac1bf6b996b2c802bba70e127fdf32f530d454f7
	}  
	,{ 
	  ip = 10.0.0.27
	  port = 30305
	  nodeId = ffa7bcd105590f14ab959aaf9e29bd73eb201dec592b0a0d30e218ec8369eca9f059a9e774f1cd9d4c456af8f72e769b554c1189564d9398a1560f3c81cd5a30
	}  
	,{ 
	  ip = 10.0.0.5
	  port = 30305
	  nodeId = af02effc252acb61203ee0883280d18066fcd3fc83bafc72210ccdceb8c2f4f90dd5c911359880655b23a9fca56628a4d5f245ecab26bde457b02bcd9d7c8d9a
	}  
	,{ 
	  ip = 10.0.0.21
	  port = 30305
	  nodeId = f157cdec3c5d7a5c6ff7fb2a6b12190b3babb0f8600cd274dbc35947f6cf5b86286774cd7250499d200f976c27d2250e5facc19ecaf5633b2726884f6ab9a112
	}]

    # currently only protocol supported is RSK
    capabilities = [rsk]

    bind.ip = 10.0.0.16

    # Peer for server to listen for incoming
    # connections
    listen.port = 30305

    connection.timeout = 2
    channel.read.timeout = 30

    privateKey = 5a31d5b17f4d02bb685e8ebbddaea79a968841155137be1ca3e697d93e1317d4

    networkId = 456124
    p2p {
        # version = 4
        framing.maxSize = 32768
        eip8 = true
    }
    maxAcivePeers = 30
}
genesis = rootstock-dev.json
transaction.approve.timeout = 15
transaction.outdated.threshold = 10

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

database {
    dir = node16
    reset = true
}

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey1

dump {
    full = false
    dir = dmp
    block = -1
    style = pretty
    clean.on.restart = true
}

vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000

    # enables storage disctionary db recording
    # see the org.ehereum.db.StorageDisctionary class for details
    storage.dictionary.enabled = false
}
trace.startblock = -1
play.vm = false
hello.phrase = Dev
root.hash.start = null
keyvalue.datasource = leveldb
redis.enabled=false
record.blocks=false
blockchain.only=false
blocks.loader=""
details.inmemory.storage.limit=1000
cache {
    flush {
        # [0.7 = 70% memory to flush]
        memory = 0
        # [10000 flush each 10000 blocks]
        blocks = 1
    }
}
# eth sync process
sync {
    enabled = true
    max.hashes.ask = 10000
    max.blocks.ask = 100
    peer.count = 10
    waitForSync = false
    exitOnBlockConflict = true
}
# miner options
miner {
    server.enabled = true
    client.enabled = true
    minGasPrice = 0
    # these are values used by MinerServer to set the notify flag on/off
    gasUnitInDollars = 0.001
    minFeesNotifyInDollars = 30
}
simulateTxs {
    enabled = false
}
federator {
    enabled = false
}
rpc {
    enabled = false
}
wallet {
    accounts = [
        {
            privateKey = 5a31d5b17f4d02bb685e8ebbddaea79a968841155137be1ca3e697d93e1317d4
            publicKey = 0437e8f47b278582fa8ff59ded2252d511b2482f2d0bc8a73e68cbc4a8d79e44c8a81729dab72a02b1a13f3038efa40f0444e3f8785a36a141f7f980cdf19028b8
            address = 8d70624e7361e4f924c968216a53a59e544e72f5
        }
    ]
}
blocks {
    enabled: false
    recorder: "blocksminer1.txt"
}
wire {
    protocol: "rsk"
}
