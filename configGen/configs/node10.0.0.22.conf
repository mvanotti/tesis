blockchain.config.name = "regtest"

peer.discovery = {
    enabled = false
    bind.ip = 10.0.0.22
    external.ip = 10.0.0.22
}

peer {
    active = [    
	{ 
	  ip = 10.0.0.14
	  port = 30305
	  nodeId = bf25a0dae60ac16b09cda6c11e8cedbf2b0eb73d1f150dff59a79a41596023bc16270d7ea041faf7f31aaa117c3291eb448c448d7f0a1e2bbe9c1f4ca495c14d
	}  
	,{ 
	  ip = 10.0.0.3
	  port = 30305
	  nodeId = c7523df51710a3b0e8a4e0cb1b08a78052a90129bd72cf5c7d80f12ac22759b71c8a9d39b834fdd35cbba213c2bd50fc47404989fc57ab99993ef7181c0dde35
	}  
	,{ 
	  ip = 10.0.0.17
	  port = 30305
	  nodeId = e14369e6d1702b6fe1e339537aff362adc7a4ab5ca3c718b64f2a1fcfc7c6956bba2548864690f84edbbec0e2d4cab433b10b61094482f93b3011bb1f03c7842
	}  
	,{ 
	  ip = 10.0.0.1
	  port = 30305
	  nodeId = 11f4c0f1e1117192feb192d95c1f3c9cd7c5f50a73f3b5364af52c7d92ff2609be360e513c0cbbfe7b306698a3e36d4ae9dea2909880390d6d04b8c0b09084ae
	}  
	,{ 
	  ip = 10.0.0.26
	  port = 30305
	  nodeId = 2e4d15f61b29537608dedf1a28f62830b134f391110b288eb749131f7c39864b4dd71ef9a6af5f8b6a6e937439b74ae28247b7a0a366c6c56a792c648cfb8c14
	}]

    # currently only protocol supported is RSK
    capabilities = [rsk]

    bind.ip = 10.0.0.22

    # Peer for server to listen for incoming
    # connections
    listen.port = 30305

    connection.timeout = 2
    channel.read.timeout = 30

    privateKey = f3911e16f736cf139fd9992d8c8a876d7b3a31927229042665b0fcce4eeba973

    networkId = 456124
    p2p {
        # version = 4
        framing.maxSize = 32768
        eip8 = true
    }
    maxAcivePeers = 30
}
genesis = rootstock-dev.json
transaction.approve.timeout = 15
transaction.outdated.threshold = 10

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

database {
    dir = node22
    reset = true
}

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey1

dump {
    full = false
    dir = dmp
    block = -1
    style = pretty
    clean.on.restart = true
}

vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000

    # enables storage disctionary db recording
    # see the org.ehereum.db.StorageDisctionary class for details
    storage.dictionary.enabled = false
}
trace.startblock = -1
play.vm = false
hello.phrase = Dev
root.hash.start = null
keyvalue.datasource = leveldb
redis.enabled=false
record.blocks=false
blockchain.only=false
blocks.loader=""
details.inmemory.storage.limit=1000
cache {
    flush {
        # [0.7 = 70% memory to flush]
        memory = 0
        # [10000 flush each 10000 blocks]
        blocks = 1
    }
}
# eth sync process
sync {
    enabled = true
    max.hashes.ask = 10000
    max.blocks.ask = 100
    peer.count = 10
    waitForSync = false
    exitOnBlockConflict = true
}
# miner options
miner {
    server.enabled = true
    client.enabled = true
    minGasPrice = 0
    # these are values used by MinerServer to set the notify flag on/off
    gasUnitInDollars = 0.001
    minFeesNotifyInDollars = 30
}
simulateTxs {
    enabled = false
}
federator {
    enabled = false
}
rpc {
    enabled = false
}
wallet {
    accounts = [
        {
            privateKey = f3911e16f736cf139fd9992d8c8a876d7b3a31927229042665b0fcce4eeba973
            publicKey = 0429915b67ea54cdcf8eb30d59e552b63524c0a348aaa99a69543f52f87f3f6890809c4db62489c2dec77c553aaa3cd5707fc1de2e095cb762e6dda00214cf2684
            address = 6f0ad01ed90048afad3afe03b5b29c09b21ecdc8
        }
    ]
}
blocks {
    enabled: false
    recorder: "blocksminer1.txt"
}
wire {
    protocol: "rsk"
}
